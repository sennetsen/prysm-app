-- Comments table for threaded discussions
create table comments (
    id bigint generated by default as identity,
    post_id uuid references posts(id) on delete cascade,
    parent_comment_id bigint,
    author_id uuid references auth.users(id) on delete set null,
    content text not null,
    is_anonymous boolean default false,
    reaction_counts jsonb default '{}'::jsonb,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    primary key (post_id, id)
);

-- Add self-referential foreign key for parent_comment_id after table creation
alter table comments 
    add constraint fk_parent_comment 
    foreign key (post_id, parent_comment_id) 
    references comments(post_id, id) on delete cascade;

-- Attachments table for both posts and comments
create table attachments (
    id uuid default uuid_generate_v4() primary key,
    post_id uuid references posts(id) on delete cascade,
    comment_id bigint,
    storage_path text not null,
    file_name text not null,
    file_type text not null,
    file_size integer not null,
    created_at timestamptz default now(),
    constraint fk_comment
        foreign key (post_id, comment_id) 
        references comments(post_id, id) on delete cascade,
    constraint attachment_owner_check
        check (
            (post_id is not null and comment_id is null) or
            (post_id is not null and comment_id is not null)
        )
);

-- Comment reactions table
create table comment_reactions (
    id uuid default uuid_generate_v4() primary key,
    post_id uuid not null,
    comment_id bigint not null,
    user_id uuid references auth.users(id) on delete cascade,
    reaction_type text not null,
    created_at timestamptz default now(),
    foreign key (post_id, comment_id) references comments(post_id, id) on delete cascade,
    unique (post_id, comment_id, user_id, reaction_type)
);

-- Add RLS policies
alter table comments enable row level security;
alter table attachments enable row level security;
alter table comment_reactions enable row level security;

-- Comments policies
create policy "Anyone can view comments"
    on comments for select using (true);

create policy "Authenticated users can create comments"
    on comments for insert
    to authenticated
    with check (auth.uid() = author_id);

create policy "Authors can update their own comments"
    on comments for update
    to authenticated
    using (auth.uid() = author_id);

create policy "Authors can delete their own comments"
    on comments for delete
    to authenticated
    using (auth.uid() = author_id);

-- Attachments policies
create policy "Anyone can view attachments"
    on attachments for select using (true);

create policy "Authenticated users can upload attachments"
    on attachments for insert
    to authenticated
    with check (true);

create policy "Authors can delete their attachments"
    on attachments for delete
    to authenticated
    using (
        (post_id is not null and exists (
            select 1 from posts where id = post_id and author_id = auth.uid()
        )) or
        (comment_id is not null and exists (
            select 1 from comments where id = comment_id and author_id = auth.uid()
        ))
    );

-- Comment reactions policies
create policy "Anyone can view reactions"
    on comment_reactions for select using (true);

create policy "Authenticated users can add reactions"
    on comment_reactions for insert
    to authenticated
    with check (auth.uid() = user_id);

create policy "Users can remove their own reactions"
    on comment_reactions for delete
    to authenticated
    using (auth.uid() = user_id);